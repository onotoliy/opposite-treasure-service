/*
 * This file is generated by jOOQ.
 */
package com.github.onotoliy.opposite.treasure.jooq.tables;


import com.github.onotoliy.opposite.treasure.jooq.Indexes;
import com.github.onotoliy.opposite.treasure.jooq.Keys;
import com.github.onotoliy.opposite.treasure.jooq.Public;
import com.github.onotoliy.opposite.treasure.jooq.tables.records.TreasureEventRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * События
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TreasureEvent extends TableImpl<TreasureEventRecord> {

    private static final long serialVersionUID = -300024711;

    /**
     * The reference instance of <code>public.treasure_event</code>
     */
    public static final TreasureEvent TREASURE_EVENT = new TreasureEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TreasureEventRecord> getRecordType() {
        return TreasureEventRecord.class;
    }

    /**
     * The column <code>public.treasure_event.guid</code>. Уникальный идентификатор
     */
    public final TableField<TreasureEventRecord, UUID> GUID = createField("guid", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор");

    /**
     * The column <code>public.treasure_event.name</code>. Название
     */
    public final TableField<TreasureEventRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "Название");

    /**
     * The column <code>public.treasure_event.contribution</code>. Взнос с одного человека
     */
    public final TableField<TreasureEventRecord, BigDecimal> CONTRIBUTION = createField("contribution", org.jooq.impl.SQLDataType.NUMERIC, this, "Взнос с одного человека");

    /**
     * The column <code>public.treasure_event.total</code>. Общая сумма
     */
    public final TableField<TreasureEventRecord, BigDecimal> TOTAL = createField("total", org.jooq.impl.SQLDataType.NUMERIC, this, "Общая сумма");

    /**
     * The column <code>public.treasure_event.deadline</code>. Конечный срок сдачи
     */
    public final TableField<TreasureEventRecord, Timestamp> DEADLINE = createField("deadline", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Конечный срок сдачи");

    /**
     * The column <code>public.treasure_event.author</code>. Автор
     */
    public final TableField<TreasureEventRecord, UUID> AUTHOR = createField("author", org.jooq.impl.SQLDataType.UUID, this, "Автор");

    /**
     * The column <code>public.treasure_event.creation_date</code>. Дата создания записи
     */
    public final TableField<TreasureEventRecord, Timestamp> CREATION_DATE = createField("creation_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Дата создания записи");

    /**
     * The column <code>public.treasure_event.deletion_date</code>. Дата удаления записи
     */
    public final TableField<TreasureEventRecord, Timestamp> DELETION_DATE = createField("deletion_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Дата удаления записи");

    /**
     * Create a <code>public.treasure_event</code> table reference
     */
    public TreasureEvent() {
        this(DSL.name("treasure_event"), null);
    }

    /**
     * Create an aliased <code>public.treasure_event</code> table reference
     */
    public TreasureEvent(String alias) {
        this(DSL.name(alias), TREASURE_EVENT);
    }

    /**
     * Create an aliased <code>public.treasure_event</code> table reference
     */
    public TreasureEvent(Name alias) {
        this(alias, TREASURE_EVENT);
    }

    private TreasureEvent(Name alias, Table<TreasureEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private TreasureEvent(Name alias, Table<TreasureEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("События"));
    }

    public <O extends Record> TreasureEvent(Table<O> child, ForeignKey<O, TreasureEventRecord> key) {
        super(child, key, TREASURE_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TREASURE_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TreasureEventRecord> getPrimaryKey() {
        return Keys.TREASURE_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TreasureEventRecord>> getKeys() {
        return Arrays.<UniqueKey<TreasureEventRecord>>asList(Keys.TREASURE_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreasureEvent as(String alias) {
        return new TreasureEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TreasureEvent as(Name alias) {
        return new TreasureEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TreasureEvent rename(String name) {
        return new TreasureEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TreasureEvent rename(Name name) {
        return new TreasureEvent(name, null);
    }
}
